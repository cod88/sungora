package users

import (
	"time"

	"gopkg.in/sungora/app.v1/core"
)

// Модель
type User struct {
	ID         uint64       ``
	InvoiceID  *uint64      ``
	Nam        *string      ``
	Age        int          ``
	Credit     float64      ``
	IsOnline   bool         `gorm:"default:1;not null"`
	Status     *string      `gorm:"type:enum('Актив','Пассив','Универсал');default:'Актив';not null;"`
	Hobby      *string      `gorm:"type:set('music','sport','reading', 'stamps', 'travel');"`
	SampleJson *string      `gorm:"type:json;"`
	Address    *string      `gorm:"type:text;"`
	CreatedAt  time.Time    ``
	UpdatedAt  time.Time    ``
	DeletedAt  *time.Time   ``
	SC         *scenarioTyp `gorm:"-" json:"-"`
}

// NewUser создание модели
func NewUser(ID uint64) *User {
	self := new(User)
	self.SC = scenario
	if ID > 0 {
		core.DB.Find(self, ID)
	}
	return self
}

// TableName определение таблицы источника обьектов
func (self *User) TableName() string {
	return "users"
}

// Load загрузка модели
func (self *User) Load(isCreate bool) error {
	if isCreate {
		return core.DB.Where(*self).FirstOrCreate(self).Error
	} else {
		return core.DB.Where(*self).FirstOrInit(self).Error
	}
}

// Save сохранение модели
func (self *User) Save() error {
	if self.ID > 0 {
		return core.DB.Save(self).Error
	} else {
		return core.DB.Create(self).Error
	}
}

// Delete удаление модели
func (self *User) Delete() error {
	err := core.DB.Delete(self).Error
	if err == nil {
		self.ID = 0
	}
	return err
}

func (self *User) InvoiceIDSet(val uint64) {
	self.InvoiceID = &val
}
func (self *User) NamSet(val string) {
	self.Nam = &val
}
func (self *User) StatusSet(val string) {
	self.Status = &val
}
func (self *User) HobbySet(val string) {
	self.Hobby = &val
}
func (self *User) SampleJsonSet(val string) {
	self.SampleJson = &val
}
func (self *User) AddressSet(val string) {
	self.Address = &val
}
