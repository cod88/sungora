package users

import (
	"github.com/jinzhu/gorm"
	"fmt"
	"time"

	"gopkg.in/sungora/app.v1/core"
)

// Модель
type User struct {
	ID         uint64       ``
	InvoiceID  *uint64      ``
	Nam        *string      ``
	Age        int          ``
	Credit     float64      ``
	IsOnline   bool         `gorm:"not null;default:1;"`
	Status     *string      `gorm:"type:enum('Актив','Пассив','Универсал');not null;default:'Пассив';"`
	Hobby      *string      `gorm:"type:set('music','sport','reading', 'stamps', 'travel');"`
	SampleJson *string      `gorm:"type:json;"`
	Address    *string      `gorm:"type:text;"`
	CreatedAt  time.Time    ``
	UpdatedAt  time.Time    ``
	DeletedAt  *time.Time   ``
}

// NewUser создание модели
func NewUser(ID uint64) *User {
	self := new(User)
	if ID > 0 {
		core.DB.Find(self, ID)
	}
	return self
}

func (self *User) InvoiceIDSet(val uint64) {
	self.InvoiceID = &val
}
func (self *User) NamSet(val string) {
	self.Nam = &val
}
func (self *User) StatusSet(val string) {
	self.Status = &val
}
func (self *User) HobbySet(val string) {
	self.Hobby = &val
}
func (self *User) SampleJsonSet(val string) {
	self.SampleJson = &val
}
func (self *User) AddressSet(val string) {
	self.Address = &val
}

// TableName определение таблицы источника обьектов
func (self *User) TableName() string {
	return "users"
}

// Load загрузка модели
func (self *User) Load(isCreate bool) error {
	if isCreate {
		return core.DB.FirstOrCreate(self, *self).Error
	} else {
		attr := User{}
		attr.IsOnline = true
		attr.StatusSet("Пассив")
		return core.DB.Attrs(attr).FirstOrInit(self, *self).Error
	}
}

// Save сохранение модели
func (self *User) Save() error {
	if self.ID > 0 {
		return core.DB.Save(self).Error
	} else {
		return core.DB.Create(self).Error
	}
}

// Delete удаление модели
func (self *User) Delete() error {
	err := core.DB.Delete(self).Error
	if err == nil {
		self.ID = 0
	}
	return err
}

// Валидация при охранении в БД

// BeforeSave функция - хук вызовется перед сохранением записи
// Также будет вызван перед хуком при создании
func (self *User) BeforeSave(scope *gorm.Scope) error {
	return nil
}

// AfterSave функция - хук вызовется после сохранения записи
// Также будет вызван после хука при создании
func (self *User) AfterSave(scope *gorm.Scope) error {
	return nil
}

//
type UserCustom struct {
	Scenario *scenarioTyp
}

// NewUserCustom расширенный функционал для модели
func NewUserCustom() *UserCustom {
	self := new(UserCustom)
	self.Scenario = scenario
	return self
}

// GetListFilter получение списка пользователей
func (self *UserCustom) GetListFilter(limit int) (users []*User) {
	core.DB.Raw(sql.GetListFilter, limit).Scan(&users)
	return
}

func sampleOther() {
	// sample custom orm query
	var users []*User
	var count int
	err := core.DB.
		Select("id, name").
		Table("users").
		Joins("...", "...").
		Where("...", "...").
		Group("...").
		Having("...", "...").
		Order("id ASC").
		Limit(5).
		Find(&users).
		Count(&count).Error
	fmt.Println(users, count, err)
	// sample slice one column
	var names []string
	core.DB.Model(&User{}).Pluck("names", &names)
	//
}
